{
    "docs": [
        {
            "location": "/", 
            "text": "BaGet\n\n\nBaGet (pronounced \"baguette\") is a lightweight NuGet and symbol server. It is \nopen source\n, cross-platform, and cloud ready!\n\n\nRun BaGet\n\n\nYou can run BaGet on your preferred platform:\n\n\n\n\nOn your computer\n\n\nDocker\n\n\nAzure\n\n\nAWS\n\n\nGoogle Cloud\n\n\n\n\nBaGet SDK\n\n\nYou can also use the \nBaGet.Protocol\n package to interact with a NuGet server. For more information, please refer to the \nBaGet SDK\n guide.", 
            "title": "Overview"
        }, 
        {
            "location": "/#baget", 
            "text": "BaGet (pronounced \"baguette\") is a lightweight NuGet and symbol server. It is  open source , cross-platform, and cloud ready!", 
            "title": "BaGet"
        }, 
        {
            "location": "/#run-baget", 
            "text": "You can run BaGet on your preferred platform:   On your computer  Docker  Azure  AWS  Google Cloud", 
            "title": "Run BaGet"
        }, 
        {
            "location": "/#baget-sdk", 
            "text": "You can also use the  BaGet.Protocol  package to interact with a NuGet server. For more information, please refer to the  BaGet SDK  guide.", 
            "title": "BaGet SDK"
        }, 
        {
            "location": "/quickstart/local/", 
            "text": "Run BaGet on your Computer\n\n\nRun BaGet\n\n\n\n\nInstall the \n.NET Core SDK\n\n\nDownload and extract \nBaGet's latest release\n\n\nStart the service with \ndotnet BaGet.dll\n\n\nBrowse \nhttp://localhost:5000/\n in your browser\n\n\n\n\nConfigure BaGet\n\n\nYou can modify BaGet's configurations by editing the \nappsettings.json\n file. For the full list of configurations, please refer to \nBaGet's configuration\n guide.\n\n\nPublish Packages\n\n\nPublish your first package with:\n\n\ndotnet nuget push -s http://localhost:5000/v3/index.json package.1.0.0.nupkg\n\n\n\n\n\nPublish your first \nsymbol package\n with:\n\n\ndotnet nuget push -s http://localhost:5000/v3/index.json symbol.package.1.0.0.snupkg\n\n\n\n\n\n\n\nWarning\n\n\nYou should secure your server by requiring an API Key to publish packages. For more information, please refer to the \nRequire an API Key\n guide.\n\n\n\n\nRestore Packages\n\n\nYou can restore packages by using the following package source:\n\n\nhttp://localhost:5000/v3/index.json\n\n\nSome helpful guides:\n\n\n\n\nVisual Studio\n\n\nNuGet.config\n\n\n\n\nSymbol Server\n\n\nYou can load symbols by using the following symbol location:\n\n\nhttp://localhost:5000/api/download/symbols\n\n\nFor Visual Studio, please refer to the \nConfigure Debugging\n guide.", 
            "title": "On your computer"
        }, 
        {
            "location": "/quickstart/local/#run-baget-on-your-computer", 
            "text": "", 
            "title": "Run BaGet on your Computer"
        }, 
        {
            "location": "/quickstart/local/#run-baget", 
            "text": "Install the  .NET Core SDK  Download and extract  BaGet's latest release  Start the service with  dotnet BaGet.dll  Browse  http://localhost:5000/  in your browser", 
            "title": "Run BaGet"
        }, 
        {
            "location": "/quickstart/local/#configure-baget", 
            "text": "You can modify BaGet's configurations by editing the  appsettings.json  file. For the full list of configurations, please refer to  BaGet's configuration  guide.", 
            "title": "Configure BaGet"
        }, 
        {
            "location": "/quickstart/local/#publish-packages", 
            "text": "Publish your first package with:  dotnet nuget push -s http://localhost:5000/v3/index.json package.1.0.0.nupkg  Publish your first  symbol package  with:  dotnet nuget push -s http://localhost:5000/v3/index.json symbol.package.1.0.0.snupkg   Warning  You should secure your server by requiring an API Key to publish packages. For more information, please refer to the  Require an API Key  guide.", 
            "title": "Publish Packages"
        }, 
        {
            "location": "/quickstart/local/#restore-packages", 
            "text": "You can restore packages by using the following package source:  http://localhost:5000/v3/index.json  Some helpful guides:   Visual Studio  NuGet.config", 
            "title": "Restore Packages"
        }, 
        {
            "location": "/quickstart/local/#symbol-server", 
            "text": "You can load symbols by using the following symbol location:  http://localhost:5000/api/download/symbols  For Visual Studio, please refer to the  Configure Debugging  guide.", 
            "title": "Symbol Server"
        }, 
        {
            "location": "/quickstart/docker/", 
            "text": "Run BaGet on Docker\n\n\nConfigure BaGet\n\n\nCreate a file named \nbaget.env\n to store BaGet's configurations:\n\n\n# The following config is the API Key used to publish packages.\n# You should change this to a secret value to secure your server.\nApiKey=NUGET-SERVER-API-KEY\n\nStorage__Type=FileSystem\nStorage__Path=/var/baget/packages\nDatabase__Type=Sqlite\nDatabase__ConnectionString=Data Source=/var/baget/baget.db\nSearch__Type=Database\n\n\n\n\n\nFor a full list of configurations, please refer to \nBaGet's configuration\n guide.\n\n\n\n\nInfo\n\n\nThe \nbaget.env\n file stores \nBaGet's configuration\n as environment\nvariables. To learn how these configurations work, please refer to\n\nASP.NET Core's configuration documentation\n.\n\n\n\n\nRun BaGet\n\n\n\n\nCreate a folder named \nbaget-data\n in the same directory as the \nbaget.env\n file. This will be used by BaGet to persist its state.\n\n\nPull BaGet's latest \ndocker image\n:\n\n\n\n\ndocker pull loicsharma/baget\n\n\n\n\n\nYou can now run BaGet:\n\n\ndocker run --rm --name nuget-server -p 5555:80 --env-file baget.env -v \n$(pwd)/baget-data:/var/baget\n loicsharma/baget:latest\n\n\n\n\n\nPublish Packages\n\n\nPublish your first package with:\n\n\ndotnet nuget push -s http://localhost:5555/v3/index.json -k NUGET-SERVER-API-KEY package.1.0.0.nupkg\n\n\n\n\n\nPublish your first \nsymbol package\n with:\n\n\ndotnet nuget push -s http://localhost:5555/v3/index.json -k NUGET-SERVER-API-KEY symbol.package.1.0.0.snupkg\n\n\n\n\n\n\n\nWarning\n\n\nThe default API Key to publish packages is \nNUGET-SERVER-API-KEY\n. You should change this to a secret value to secure your server. See \nConfigure BaGet\n.\n\n\n\n\nBrowse Packages\n\n\nYou can browse packages by opening the URL \nhttp://localhost:5555/\n in your browser.\n\n\nRestore Packages\n\n\nYou can restore packages by using the following package source:\n\n\nhttp://localhost:5555/v3/index.json\n\n\nSome helpful guides:\n\n\n\n\nVisual Studio\n\n\nNuGet.config\n\n\n\n\nSymbol Server\n\n\nYou can load symbols by using the following symbol location:\n\n\nhttp://localhost:5555/api/download/symbols\n\n\nFor Visual Studio, please refer to the \nConfigure Debugging\n guide.", 
            "title": "Docker"
        }, 
        {
            "location": "/quickstart/docker/#run-baget-on-docker", 
            "text": "", 
            "title": "Run BaGet on Docker"
        }, 
        {
            "location": "/quickstart/docker/#configure-baget", 
            "text": "Create a file named  baget.env  to store BaGet's configurations:  # The following config is the API Key used to publish packages.\n# You should change this to a secret value to secure your server.\nApiKey=NUGET-SERVER-API-KEY\n\nStorage__Type=FileSystem\nStorage__Path=/var/baget/packages\nDatabase__Type=Sqlite\nDatabase__ConnectionString=Data Source=/var/baget/baget.db\nSearch__Type=Database  For a full list of configurations, please refer to  BaGet's configuration  guide.   Info  The  baget.env  file stores  BaGet's configuration  as environment\nvariables. To learn how these configurations work, please refer to ASP.NET Core's configuration documentation .", 
            "title": "Configure BaGet"
        }, 
        {
            "location": "/quickstart/docker/#run-baget", 
            "text": "Create a folder named  baget-data  in the same directory as the  baget.env  file. This will be used by BaGet to persist its state.  Pull BaGet's latest  docker image :   docker pull loicsharma/baget  You can now run BaGet:  docker run --rm --name nuget-server -p 5555:80 --env-file baget.env -v  $(pwd)/baget-data:/var/baget  loicsharma/baget:latest", 
            "title": "Run BaGet"
        }, 
        {
            "location": "/quickstart/docker/#publish-packages", 
            "text": "Publish your first package with:  dotnet nuget push -s http://localhost:5555/v3/index.json -k NUGET-SERVER-API-KEY package.1.0.0.nupkg  Publish your first  symbol package  with:  dotnet nuget push -s http://localhost:5555/v3/index.json -k NUGET-SERVER-API-KEY symbol.package.1.0.0.snupkg   Warning  The default API Key to publish packages is  NUGET-SERVER-API-KEY . You should change this to a secret value to secure your server. See  Configure BaGet .", 
            "title": "Publish Packages"
        }, 
        {
            "location": "/quickstart/docker/#browse-packages", 
            "text": "You can browse packages by opening the URL  http://localhost:5555/  in your browser.", 
            "title": "Browse Packages"
        }, 
        {
            "location": "/quickstart/docker/#restore-packages", 
            "text": "You can restore packages by using the following package source:  http://localhost:5555/v3/index.json  Some helpful guides:   Visual Studio  NuGet.config", 
            "title": "Restore Packages"
        }, 
        {
            "location": "/quickstart/docker/#symbol-server", 
            "text": "You can load symbols by using the following symbol location:  http://localhost:5555/api/download/symbols  For Visual Studio, please refer to the  Configure Debugging  guide.", 
            "title": "Symbol Server"
        }, 
        {
            "location": "/quickstart/azure/", 
            "text": "Run BaGet on Azure\n\n\n\n\nWarning\n\n\nThis page is a work in progress!\n\n\n\n\nUse Azure to scale BaGet. You can store metadata on \nAzure SQL Database\n, upload packages to \nAzure Blob Storage\n, and provide powerful search using \nAzure Search\n.\n\n\nTODO\n\n\n\n\nApp Service\n\n\nTable Storage\n\n\nHigh availability setup\n\n\n\n\nConfigure BaGet\n\n\nYou can modify BaGet's configurations by editing the \nappsettings.json\n file. For the full list of configurations, please refer to \nBaGet's configuration\n guide.\n\n\nAzure SQL Database\n\n\nUpdate the \nappsettings.json\n file:\n\n\n{\n\n    \n...\n\n\n    \nDatabase\n:\n \n{\n\n        \nType\n:\n \nSqlServer\n,\n\n        \nConnectionString\n:\n \n...\n\n    \n},\n\n\n    \n...\n\n\n}\n\n\n\n\n\n\nAzure Blob Storage\n\n\nUpdate the \nappsettings.json\n file:\n\n\n{\n\n    \n...\n\n\n    \nStorage\n:\n \n{\n\n        \nType\n:\n \nAzureBlobStorage\n,\n\n        \nAccountName\n:\n \nmy-account\n,\n\n        \nContainer\n:\n \nmy-container\n,\n\n        \nAccessKey\n:\n \nabcd1234\n\n    \n},\n\n\n    \n...\n\n\n}\n\n\n\n\n\n\nAzure Search\n\n\nUpdate the \nappsettings.json\n file:\n\n\n{\n\n    \n...\n\n\n    \nSearch\n:\n \n{\n\n        \nType\n:\n \nAzure\n,\n\n        \nAccountName\n:\n \nmy-account\n,\n\n        \nApiKey\n:\n \nABCD1234\n\n    \n},\n\n\n    \n...\n\n\n}\n\n\n\n\n\n\nPublish Packages\n\n\nPublish your first package with:\n\n\ndotnet nuget push -s http://localhost:5000/v3/index.json package.1.0.0.nupkg\n\n\n\n\n\nPublish your first \nsymbol package\n with:\n\n\ndotnet nuget push -s http://localhost:5000/v3/index.json symbol.package.1.0.0.snupkg\n\n\n\n\n\n\n\nWarning\n\n\nYou should secure your server by requiring an API Key to publish packages. For more information, please refer to the \nRequire an API Key\n guide.\n\n\n\n\nRestore Packages\n\n\nYou can restore packages by using the following package source:\n\n\nhttp://localhost:5000/v3/index.json\n\n\nSome helpful guides:\n\n\n\n\nVisual Studio\n\n\nNuGet.config\n\n\n\n\nSymbol Server\n\n\nYou can load symbols by using the following symbol location:\n\n\nhttp://localhost:5000/api/download/symbols\n\n\nFor Visual Studio, please refer to the \nConfigure Debugging\n guide.", 
            "title": "Azure"
        }, 
        {
            "location": "/quickstart/azure/#run-baget-on-azure", 
            "text": "Warning  This page is a work in progress!   Use Azure to scale BaGet. You can store metadata on  Azure SQL Database , upload packages to  Azure Blob Storage , and provide powerful search using  Azure Search .", 
            "title": "Run BaGet on Azure"
        }, 
        {
            "location": "/quickstart/azure/#todo", 
            "text": "App Service  Table Storage  High availability setup", 
            "title": "TODO"
        }, 
        {
            "location": "/quickstart/azure/#configure-baget", 
            "text": "You can modify BaGet's configurations by editing the  appsettings.json  file. For the full list of configurations, please refer to  BaGet's configuration  guide.", 
            "title": "Configure BaGet"
        }, 
        {
            "location": "/quickstart/azure/#azure-sql-database", 
            "text": "Update the  appsettings.json  file:  { \n     ... \n\n     Database :   { \n         Type :   SqlServer , \n         ConnectionString :   ... \n     }, \n\n     ...  }", 
            "title": "Azure SQL Database"
        }, 
        {
            "location": "/quickstart/azure/#azure-blob-storage", 
            "text": "Update the  appsettings.json  file:  { \n     ... \n\n     Storage :   { \n         Type :   AzureBlobStorage , \n         AccountName :   my-account , \n         Container :   my-container , \n         AccessKey :   abcd1234 \n     }, \n\n     ...  }", 
            "title": "Azure Blob Storage"
        }, 
        {
            "location": "/quickstart/azure/#azure-search", 
            "text": "Update the  appsettings.json  file:  { \n     ... \n\n     Search :   { \n         Type :   Azure , \n         AccountName :   my-account , \n         ApiKey :   ABCD1234 \n     }, \n\n     ...  }", 
            "title": "Azure Search"
        }, 
        {
            "location": "/quickstart/azure/#publish-packages", 
            "text": "Publish your first package with:  dotnet nuget push -s http://localhost:5000/v3/index.json package.1.0.0.nupkg  Publish your first  symbol package  with:  dotnet nuget push -s http://localhost:5000/v3/index.json symbol.package.1.0.0.snupkg   Warning  You should secure your server by requiring an API Key to publish packages. For more information, please refer to the  Require an API Key  guide.", 
            "title": "Publish Packages"
        }, 
        {
            "location": "/quickstart/azure/#restore-packages", 
            "text": "You can restore packages by using the following package source:  http://localhost:5000/v3/index.json  Some helpful guides:   Visual Studio  NuGet.config", 
            "title": "Restore Packages"
        }, 
        {
            "location": "/quickstart/azure/#symbol-server", 
            "text": "You can load symbols by using the following symbol location:  http://localhost:5000/api/download/symbols  For Visual Studio, please refer to the  Configure Debugging  guide.", 
            "title": "Symbol Server"
        }, 
        {
            "location": "/quickstart/aws/", 
            "text": "Run BaGet on AWS\n\n\n\n\nWarning\n\n\nThis page is a work in progress!\n\n\n\n\nUse Amazon Web Services to scale BaGet. You can store metadata on \nAmazon RDS\n and upload packages to \nAmazon S3\n.\n\n\nConfigure BaGet\n\n\nYou can modify BaGet's configurations by editing the \nappsettings.json\n file. For the full list of configurations, please refer to \nBaGet's configuration\n guide.\n\n\nAmazon S3\n\n\nUpdate the \nappsettings.json\n file:\n\n\n{\n\n    \n...\n\n\n    \nStorage\n:\n \n{\n\n        \nType\n:\n \nAwsS3\n,\n\n        \nRegion\n:\n \nus-west-1\n,\n\n        \nBucket\n:\n \nfoo\n,\n\n        \nAccessKey\n:\n \n,\n\n        \nSecretKey\n:\n \n\n    \n},\n\n\n    \n...\n\n\n}\n\n\n\n\n\n\nAmazon RDS\n\n\nTo use PostgreSQL, update the \nappsettings.json\n file:\n\n\n{\n\n    \n...\n\n\n    \nDatabase\n:\n \n{\n\n        \nType\n:\n \nPostgreSql\n,\n\n        \nConnectionString\n:\n \n...\n\n    \n},\n\n\n    \n...\n\n\n}\n\n\n\n\n\n\nTo use MySQL, update the \nappsettings.json\n file:\n\n\n{\n\n    \n...\n\n\n    \nDatabase\n:\n \n{\n\n        \nType\n:\n \nMySql\n,\n\n        \nConnectionString\n:\n \n...\n\n    \n},\n\n\n    \n...\n\n\n}\n\n\n\n\n\n\nPublish Packages\n\n\nPublish your first package with:\n\n\ndotnet nuget push -s http://localhost:5000/v3/index.json package.1.0.0.nupkg\n\n\n\n\n\nPublish your first \nsymbol package\n with:\n\n\ndotnet nuget push -s http://localhost:5000/v3/index.json symbol.package.1.0.0.snupkg\n\n\n\n\n\n\n\nWarning\n\n\nYou should secure your server by requiring an API Key to publish packages. For more information, please refer to the \nRequire an API Key\n guide.\n\n\n\n\nRestore Packages\n\n\nYou can restore packages by using the following package source:\n\n\nhttp://localhost:5000/v3/index.json\n\n\nSome helpful guides:\n\n\n\n\nVisual Studio\n\n\nNuGet.config\n\n\n\n\nSymbol Server\n\n\nYou can load symbols by using the following symbol location:\n\n\nhttp://localhost:5000/api/download/symbols\n\n\nFor Visual Studio, please refer to the \nConfigure Debugging\n guide.", 
            "title": "AWS"
        }, 
        {
            "location": "/quickstart/aws/#run-baget-on-aws", 
            "text": "Warning  This page is a work in progress!   Use Amazon Web Services to scale BaGet. You can store metadata on  Amazon RDS  and upload packages to  Amazon S3 .", 
            "title": "Run BaGet on AWS"
        }, 
        {
            "location": "/quickstart/aws/#configure-baget", 
            "text": "You can modify BaGet's configurations by editing the  appsettings.json  file. For the full list of configurations, please refer to  BaGet's configuration  guide.", 
            "title": "Configure BaGet"
        }, 
        {
            "location": "/quickstart/aws/#amazon-s3", 
            "text": "Update the  appsettings.json  file:  { \n     ... \n\n     Storage :   { \n         Type :   AwsS3 , \n         Region :   us-west-1 , \n         Bucket :   foo , \n         AccessKey :   , \n         SecretKey :   \n     }, \n\n     ...  }", 
            "title": "Amazon S3"
        }, 
        {
            "location": "/quickstart/aws/#amazon-rds", 
            "text": "To use PostgreSQL, update the  appsettings.json  file:  { \n     ... \n\n     Database :   { \n         Type :   PostgreSql , \n         ConnectionString :   ... \n     }, \n\n     ...  }   To use MySQL, update the  appsettings.json  file:  { \n     ... \n\n     Database :   { \n         Type :   MySql , \n         ConnectionString :   ... \n     }, \n\n     ...  }", 
            "title": "Amazon RDS"
        }, 
        {
            "location": "/quickstart/aws/#publish-packages", 
            "text": "Publish your first package with:  dotnet nuget push -s http://localhost:5000/v3/index.json package.1.0.0.nupkg  Publish your first  symbol package  with:  dotnet nuget push -s http://localhost:5000/v3/index.json symbol.package.1.0.0.snupkg   Warning  You should secure your server by requiring an API Key to publish packages. For more information, please refer to the  Require an API Key  guide.", 
            "title": "Publish Packages"
        }, 
        {
            "location": "/quickstart/aws/#restore-packages", 
            "text": "You can restore packages by using the following package source:  http://localhost:5000/v3/index.json  Some helpful guides:   Visual Studio  NuGet.config", 
            "title": "Restore Packages"
        }, 
        {
            "location": "/quickstart/aws/#symbol-server", 
            "text": "You can load symbols by using the following symbol location:  http://localhost:5000/api/download/symbols  For Visual Studio, please refer to the  Configure Debugging  guide.", 
            "title": "Symbol Server"
        }, 
        {
            "location": "/quickstart/gcp/", 
            "text": "Run BaGet on Google Cloud Platform\n\n\n\n\nWarning\n\n\nThis page is a work in progress!\n\n\n\n\nWe're open source and accept contributions!\n\nFork us on GitHub\n.\n\n\nBefore you begin, you should decide \nwhich AppEngine region\n\nyou will use. For best performance, Cloud Storage and Cloud SQL should be located\nin the same region as your AppEngine deployment.\n\n\nGoogle Cloud Storage\n\n\nPackages can be stored in \nGoogle Cloud Storage\n.\n\n\nSetup\n\n\nFollow the instructions in \nUsing Cloud Storage\n to create a bucket.\n\n\nConfiguration\n\n\nNOTE:\n If you plan to use AppEngine, skip this part and follow the AppEngine instructions below.\n\n\nSet up a service account and download credentials. Set the \nGOOGLE_APPLICATION_CREDENTIALS\n environment variable to the path to the JSON file you downloaded.\n\n\nConfigure BaGet to use Google Cloud Storage by updating the \nappsettings.json\n file:\n\n\n{\n\n    \n...\n\n\n    \nStorage\n:\n \n{\n\n        \nType\n:\n \nGoogleCloud\n,\n\n        \nBucketName\n:\n \nyour-gcs-bucket\n\n    \n},\n\n\n    \n...\n\n\n}\n\n\n\n\n\n\nGoogle Cloud SQL\n\n\n\n\nFollow the instructions in \nUsing Cloud SQL\n to create a 2nd Gen MySQL 5.7 Google Cloud SQL instance. The default options should work well.\n\n\nCreate a database named \nbaget\n. This can be done through the Google Cloud Console. Use \nutf8mb4\n as the Character set.\n\n\nFollow \nConfiguring SSL/TLS\n to create a client certificate. Download the three files it creates.\n\n\nConvert the PEM to a PFX by running \nopenssl pkcs12 -inkey client-key.pem -in client-cert.pem -export -out client.pfx\n\n\nOne way to obtain OpenSSL on Windows is to install \nGit Bash\n.\n\n\nConfigure BaGet to use Google Cloud SQL by updating the \nappsettings.json\n file:\n\n\n\n\n{\n\n    \n...\n\n    \nDatabase\n:\n \n{\n\n        \nType\n:\n \nMySql\n,\n\n        \nConnectionString\n:\n \nServer=YOURIP;User Id=root;Password=***;Database=baget;CertificateFile=C:\\\\Path\\\\To\\\\client.pfx;CACertificateFile=C:\\\\Path\\\\To\\\\server-ca.pem;SSL Mode=VerifyCA\n\n    \n},\n\n    \n...\n\n\n}\n\n\n\n\n\n\n\n\nCreate the tables by running \ndotnet ef database update --context MySqlContext --project src\\BaGet\n\n\n\n\nGoogle AppEngine\n\n\nBaGet can be hosted in Google AppEngine. See \nhere\n\nfor a tutorial on how to create a new AppEngine project.\n\n\nCreate a \napp.yaml\n file to publish the Docker container built by the Dockerfile in this repo. In the template\nbelow, make the following replacements:\n\n\n\n\nPROJECT\n - your GCP project, as returned by \ngcloud config get-value project\n\n\nREGION\n -- the GCP region your Google Cloud SQL database is in, e.g., \nus-central1\n or \nus-west2\n\n\nDBINSTANCE\n -- the name of your Google Cloud SQL database instance\n\n\nDBNAME\n -- the name of the BaGet database on that instance (e.g., \nbaget\n in the instructions above)\n\n\nPASSWORD\n -- the password for the database root user\n\n\nBUCKETNAME\n -- the name of the Google Cloud Storage Bucket configured above\n\n\n\n\nruntime\n:\n \ncustom\n\n\nenv\n:\n \nflex\n\n\n\n# The settings below are to reduce costs during testing and are not necessarily\n\n\n# appropriate for production use. For more information, see:\n\n\n# https://cloud.google.com/appengine/docs/flexible/dotnet/configuring-your-app-with-app-yaml\n\n\nresources\n:\n\n  \ncpu\n:\n \n1\n\n  \nmemory_gb\n:\n \n0.5\n\n  \ndisk_size_gb\n:\n \n10\n\n\n\nbeta_settings\n:\n\n  \ncloud_sql_instances\n:\n \nPROJECT:REGION:DBINSTANCE\n\n\n\nenv_variables\n:\n\n  \nDatabase__Type\n:\n \nMySql\n\n  \nDatabase__ConnectionString\n:\n \nServer=/cloudsql/PROJECT:REGION:DBINSTANCE;User\n \nId=root;Password=PASSWORD;Database=DBNAME;SslMode=None\n\n  \nStorage__Type\n:\n \nGoogleCloud\n\n  \nStorage__BucketName\n:\n \nBUCKETNAME\n\n  \nSearch__Type\n:\n \nDatabase\n\n  \nASPNETCORE_URLS\n:\n \nhttp://0.0.0.0:8080\n\n\n\n\n\n\nTo publish the application, run \ngcloud app deploy\n.", 
            "title": "Google Cloud"
        }, 
        {
            "location": "/quickstart/gcp/#run-baget-on-google-cloud-platform", 
            "text": "Warning  This page is a work in progress!   We're open source and accept contributions! Fork us on GitHub .  Before you begin, you should decide  which AppEngine region \nyou will use. For best performance, Cloud Storage and Cloud SQL should be located\nin the same region as your AppEngine deployment.", 
            "title": "Run BaGet on Google Cloud Platform"
        }, 
        {
            "location": "/quickstart/gcp/#google-cloud-storage", 
            "text": "Packages can be stored in  Google Cloud Storage .", 
            "title": "Google Cloud Storage"
        }, 
        {
            "location": "/quickstart/gcp/#setup", 
            "text": "Follow the instructions in  Using Cloud Storage  to create a bucket.", 
            "title": "Setup"
        }, 
        {
            "location": "/quickstart/gcp/#configuration", 
            "text": "NOTE:  If you plan to use AppEngine, skip this part and follow the AppEngine instructions below.  Set up a service account and download credentials. Set the  GOOGLE_APPLICATION_CREDENTIALS  environment variable to the path to the JSON file you downloaded.  Configure BaGet to use Google Cloud Storage by updating the  appsettings.json  file:  { \n     ... \n\n     Storage :   { \n         Type :   GoogleCloud , \n         BucketName :   your-gcs-bucket \n     }, \n\n     ...  }", 
            "title": "Configuration"
        }, 
        {
            "location": "/quickstart/gcp/#google-cloud-sql", 
            "text": "Follow the instructions in  Using Cloud SQL  to create a 2nd Gen MySQL 5.7 Google Cloud SQL instance. The default options should work well.  Create a database named  baget . This can be done through the Google Cloud Console. Use  utf8mb4  as the Character set.  Follow  Configuring SSL/TLS  to create a client certificate. Download the three files it creates.  Convert the PEM to a PFX by running  openssl pkcs12 -inkey client-key.pem -in client-cert.pem -export -out client.pfx  One way to obtain OpenSSL on Windows is to install  Git Bash .  Configure BaGet to use Google Cloud SQL by updating the  appsettings.json  file:   { \n     ... \n     Database :   { \n         Type :   MySql , \n         ConnectionString :   Server=YOURIP;User Id=root;Password=***;Database=baget;CertificateFile=C:\\\\Path\\\\To\\\\client.pfx;CACertificateFile=C:\\\\Path\\\\To\\\\server-ca.pem;SSL Mode=VerifyCA \n     }, \n     ...  }    Create the tables by running  dotnet ef database update --context MySqlContext --project src\\BaGet", 
            "title": "Google Cloud SQL"
        }, 
        {
            "location": "/quickstart/gcp/#google-appengine", 
            "text": "BaGet can be hosted in Google AppEngine. See  here \nfor a tutorial on how to create a new AppEngine project.  Create a  app.yaml  file to publish the Docker container built by the Dockerfile in this repo. In the template\nbelow, make the following replacements:   PROJECT  - your GCP project, as returned by  gcloud config get-value project  REGION  -- the GCP region your Google Cloud SQL database is in, e.g.,  us-central1  or  us-west2  DBINSTANCE  -- the name of your Google Cloud SQL database instance  DBNAME  -- the name of the BaGet database on that instance (e.g.,  baget  in the instructions above)  PASSWORD  -- the password for the database root user  BUCKETNAME  -- the name of the Google Cloud Storage Bucket configured above   runtime :   custom  env :   flex  # The settings below are to reduce costs during testing and are not necessarily  # appropriate for production use. For more information, see:  # https://cloud.google.com/appengine/docs/flexible/dotnet/configuring-your-app-with-app-yaml  resources : \n   cpu :   1 \n   memory_gb :   0.5 \n   disk_size_gb :   10  beta_settings : \n   cloud_sql_instances :   PROJECT:REGION:DBINSTANCE  env_variables : \n   Database__Type :   MySql \n   Database__ConnectionString :   Server=/cloudsql/PROJECT:REGION:DBINSTANCE;User   Id=root;Password=PASSWORD;Database=DBNAME;SslMode=None \n   Storage__Type :   GoogleCloud \n   Storage__BucketName :   BUCKETNAME \n   Search__Type :   Database \n   ASPNETCORE_URLS :   http://0.0.0.0:8080   To publish the application, run  gcloud app deploy .", 
            "title": "Google AppEngine"
        }, 
        {
            "location": "/quickstart/iis-proxy/", 
            "text": "Windows IIS Proxy\n\n\nWith a few extra steps you can run BaGet behind a Windows IIS proxy. This has many benefits, including automatic restarts on reboots.\n\n\nIIS Setup\n\n\n\n\nInstall the \n.NET Core Runtime\n on the web server.\n\n\nCopy the BaGet directory over to your hosting area such as \nC:\\Inetpub\\wwwroot\\BaGet\n\n\n\n\nUsing IIS Manager, create a new Application Pool:\n\n\n\n\nName = \nBaGetAppPool\n (can be whatever you want)\n\n\n.NET CLR version = No Managed Code\n\n\nManaged Pipeline Mode = Integrated\n\n\nStart application pool immediately = checked\n\n\n\n\n\n\n\n\nUsing IIS Manager, create a new web site:\n\n\n\n\nChoose your site name and physical path\n\n\nChoose \nBaGetAppPool\n as the application pool\n\n\nIn the Binding area, enter the default BaGet port of 5000\n\n\n\n\n\n\n\n\nBaGet Folder Permissions\n\n\nYou \nmay\n need to give special permissions to the top-level BaGet folder so that the app can persist its state. This is necessary as the Application Pools' identity is a virtual account that isn't recognized by the Windows User Management Console. For more information, please refer to ASP.NET Core's documentation:\n\n\n\n\nApplication Pools\n\n\nApplication Pool Identity\n\n\n\n\nAlternative Storage Path\n\n\n\n\nInfo\n\n\nVirtual Directories do not work with IIS and Kestrel. For more information, please refer to \nASP.NET Core's documentation\n.\n\n\n\n\nEnsure that the configuration's storage \nPath\n has the appropriate forward slashes:\n\n\n...\n\n  \nStorage\n:\n \n{\n\n    \nType\n:\n \nFileSystem\n,\n\n    \nPath\n:\n \nC://AnotherFolder/Packages\n\n  \n},\n\n\n...\n\n\n\n\n\n\nNote that you will need to adjust folder permissions if the \nPath\n is created outside of the BaGet top-level directory. See the \nBaGet Folder Permissions\n.", 
            "title": "Windows IIS Proxy"
        }, 
        {
            "location": "/quickstart/iis-proxy/#windows-iis-proxy", 
            "text": "With a few extra steps you can run BaGet behind a Windows IIS proxy. This has many benefits, including automatic restarts on reboots.", 
            "title": "Windows IIS Proxy"
        }, 
        {
            "location": "/quickstart/iis-proxy/#iis-setup", 
            "text": "Install the  .NET Core Runtime  on the web server.  Copy the BaGet directory over to your hosting area such as  C:\\Inetpub\\wwwroot\\BaGet   Using IIS Manager, create a new Application Pool:   Name =  BaGetAppPool  (can be whatever you want)  .NET CLR version = No Managed Code  Managed Pipeline Mode = Integrated  Start application pool immediately = checked     Using IIS Manager, create a new web site:   Choose your site name and physical path  Choose  BaGetAppPool  as the application pool  In the Binding area, enter the default BaGet port of 5000", 
            "title": "IIS Setup"
        }, 
        {
            "location": "/quickstart/iis-proxy/#baget-folder-permissions", 
            "text": "You  may  need to give special permissions to the top-level BaGet folder so that the app can persist its state. This is necessary as the Application Pools' identity is a virtual account that isn't recognized by the Windows User Management Console. For more information, please refer to ASP.NET Core's documentation:   Application Pools  Application Pool Identity", 
            "title": "BaGet Folder Permissions"
        }, 
        {
            "location": "/quickstart/iis-proxy/#alternative-storage-path", 
            "text": "Info  Virtual Directories do not work with IIS and Kestrel. For more information, please refer to  ASP.NET Core's documentation .   Ensure that the configuration's storage  Path  has the appropriate forward slashes:  ... \n   Storage :   { \n     Type :   FileSystem , \n     Path :   C://AnotherFolder/Packages \n   },  ...   Note that you will need to adjust folder permissions if the  Path  is created outside of the BaGet top-level directory. See the  BaGet Folder Permissions .", 
            "title": "Alternative Storage Path"
        }, 
        {
            "location": "/configuration/", 
            "text": "Configuration\n\n\nYou can modify BaGet's configurations by editing the \nappsettings.json\n file.\n\n\nRequire an API Key\n\n\nYou can require that users provide a password, called an API Key, to publish packages.\nTo do so, you can insert the desired API key in the \nApiKey\n field.\n\n\n{\n\n    \nApiKey\n:\n \nNUGET-SERVER-API-KEY\n,\n\n    \n...\n\n\n}\n\n\n\n\n\n\nUsers will now have to provide the API key to push packages:\n\n\ndotnet\n \nnuget\n \npush\n \n-\ns\n \nhttp\n:\n//localhost:5000/v3/index.json -k NUGET-SERVER-API-KEY package.1.0.0.nupkg\n\n\n\n\n\n\nEnable Read-Through Caching\n\n\nRead-through caching lets you index packages from an upstream source. You can use read-through\ncaching to:\n\n\n\n\nSpeed up your builds if restores from \nnuget.org\n are slow\n\n\nEnable package restores in offline scenarios\n\n\n\n\nThe following \nMirror\n settings configures BaGet to index packages from \nnuget.org\n:\n\n\n{\n\n    \n...\n\n\n    \nMirror\n:\n \n{\n\n        \nEnabled\n:\n  \ntrue\n,\n\n        \nPackageSource\n:\n \nhttps://api.nuget.org/v3/index.json\n\n    \n},\n\n\n    \n...\n\n\n}\n\n\n\n\n\n\n\n\nInfo\n\n\nPackageSource\n is the value of the \nNuGet service index\n.\n\n\n\n\nEnable Package Hard Deletions\n\n\nTo prevent the \n\"left pad\" problem\n,\nBaGet's default configuration doesn't allow package deletions. Whenever BaGet receives a package deletion\nrequest, it will instead \"unlist\" the package. An unlisted package is undiscoverable but can still be\ndownloaded if you know the package's id and version. You can override this behavior by setting the\n\nPackageDeletionBehavior\n:\n\n\n{\n\n    \n...\n\n\n    \nPackageDeletionBehavior\n:\n \nHardDelete\n,\n\n\n    \n...\n\n\n}\n\n\n\n\n\n\nEnable Package Overwrites\n\n\nNormally, BaGet will reject a package upload if the id and version is already taken. You can configure BaGet\nto overwrite the already existing package by setting \nAllowPackageOverwrites\n:\n\n\n{\n\n    \n...\n\n\n    \nAllowPackageOverwrites\n:\n \ntrue\n,\n\n\n    \n...\n\n\n}\n\n\n\n\n\n\nPrivate Feeds\n\n\nA private feed requires users to authenticate before accessing packages.\n\n\n\n\nWarning\n\n\nPrivate feeds are not supported at this time! See \nthis pull request\n for more information.", 
            "title": "Configuration"
        }, 
        {
            "location": "/configuration/#configuration", 
            "text": "You can modify BaGet's configurations by editing the  appsettings.json  file.", 
            "title": "Configuration"
        }, 
        {
            "location": "/configuration/#require-an-api-key", 
            "text": "You can require that users provide a password, called an API Key, to publish packages.\nTo do so, you can insert the desired API key in the  ApiKey  field.  { \n     ApiKey :   NUGET-SERVER-API-KEY , \n     ...  }   Users will now have to provide the API key to push packages:  dotnet   nuget   push   - s   http : //localhost:5000/v3/index.json -k NUGET-SERVER-API-KEY package.1.0.0.nupkg", 
            "title": "Require an API Key"
        }, 
        {
            "location": "/configuration/#enable-read-through-caching", 
            "text": "Read-through caching lets you index packages from an upstream source. You can use read-through\ncaching to:   Speed up your builds if restores from  nuget.org  are slow  Enable package restores in offline scenarios   The following  Mirror  settings configures BaGet to index packages from  nuget.org :  { \n     ... \n\n     Mirror :   { \n         Enabled :    true , \n         PackageSource :   https://api.nuget.org/v3/index.json \n     }, \n\n     ...  }    Info  PackageSource  is the value of the  NuGet service index .", 
            "title": "Enable Read-Through Caching"
        }, 
        {
            "location": "/configuration/#enable-package-hard-deletions", 
            "text": "To prevent the  \"left pad\" problem ,\nBaGet's default configuration doesn't allow package deletions. Whenever BaGet receives a package deletion\nrequest, it will instead \"unlist\" the package. An unlisted package is undiscoverable but can still be\ndownloaded if you know the package's id and version. You can override this behavior by setting the PackageDeletionBehavior :  { \n     ... \n\n     PackageDeletionBehavior :   HardDelete , \n\n     ...  }", 
            "title": "Enable Package Hard Deletions"
        }, 
        {
            "location": "/configuration/#enable-package-overwrites", 
            "text": "Normally, BaGet will reject a package upload if the id and version is already taken. You can configure BaGet\nto overwrite the already existing package by setting  AllowPackageOverwrites :  { \n     ... \n\n     AllowPackageOverwrites :   true , \n\n     ...  }", 
            "title": "Enable Package Overwrites"
        }, 
        {
            "location": "/configuration/#private-feeds", 
            "text": "A private feed requires users to authenticate before accessing packages.   Warning  Private feeds are not supported at this time! See  this pull request  for more information.", 
            "title": "Private Feeds"
        }, 
        {
            "location": "/tools/mirroring/", 
            "text": "Mirroring nuget.org\n\n\n\n\nWarning\n\n\nThis page is a work in progress!\n\n\n\n\nImporting package downloads from nuget.org\n\n\nYou can import package downloads from nuget.org:\n\n\n\n\nNavigate to \n.\\BaGet\\src\\BaGet\n\n\nRun:\n\n\n\n\ndotnet run -- import-downloads\n\n\n\n\n\nIndexing nuget.org\n\n\n\n\nTODO Check-in code\n\n\nExplain scaling\n\n\nRebuild indexes at end\n\n\nImporting downloads from nuget.org", 
            "title": "Mirroring"
        }, 
        {
            "location": "/tools/mirroring/#mirroring-nugetorg", 
            "text": "Warning  This page is a work in progress!", 
            "title": "Mirroring nuget.org"
        }, 
        {
            "location": "/tools/mirroring/#importing-package-downloads-from-nugetorg", 
            "text": "You can import package downloads from nuget.org:   Navigate to  .\\BaGet\\src\\BaGet  Run:   dotnet run -- import-downloads", 
            "title": "Importing package downloads from nuget.org"
        }, 
        {
            "location": "/tools/mirroring/#indexing-nugetorg", 
            "text": "TODO Check-in code  Explain scaling  Rebuild indexes at end  Importing downloads from nuget.org", 
            "title": "Indexing nuget.org"
        }, 
        {
            "location": "/tools/sdk/", 
            "text": "BaGet SDK\n\n\nYou can use BaGet's \nBaGet.Protocol\n package to interact with a NuGet server.\n\n\nGetting Started\n\n\nInstall the \nBaGet.Protocol\n package:\n\n\ndotnet add package BaGet.Protocol\n\n\n\n\n\nList Package Versions\n\n\nFind all versions of the \nNewtonsoft.Json\n package:\n\n\nNuGetClient\n \nclient\n \n=\n \nnew\n \nNuGetClient\n(\nhttps://api.nuget.org/v3/index.json\n);\n\n\n\nIReadOnlyList\nNuGetVersion\n \nversions\n \n=\n \nawait\n \nclient\n.\nListPackageVersionsAsync\n(\nNewtonsoft.Json\n);\n\n\n\nforeach\n \n(\nNuGetVersion\n \nversion\n \nin\n \nversions\n)\n\n\n{\n\n    \nConsole\n.\nWriteLine\n(\n$\nFound version: {version}\n);\n\n\n}\n\n\n\n\n\n\nDownload a package\n\n\nNuGetClient\n \nclient\n \n=\n \nnew\n \nNuGetClient\n(\nhttps://api.nuget.org/v3/index.json\n);\n\n\n\nstring\n \npackageId\n \n=\n \nNewtonsoft.Json\n;\n\n\nNuGetVersion\n \npackageVersion\n \n=\n \nnew\n \nNuGetVersion\n(\n12.0.1\n);\n\n\n\nusing\n \n(\nStream\n \npackageStream\n \n=\n \nawait\n \nclient\n.\nGetPackageStreamAsync\n(\npackageId\n,\n \npackageVersion\n))\n\n\n{\n\n    \nConsole\n.\nWriteLine\n(\n$\nDownloaded package {packageId} {packageVersion}\n);\n\n\n}\n\n\n\n\n\n\nFind Package Metadata\n\n\nNuGetClient\n \nclient\n \n=\n \nnew\n \nNuGetClient\n(\nhttps://api.nuget.org/v3/index.json\n);\n\n\n\n// Find the metadata for all versions of a package.\n\n\nIReadOnlyList\nPackageMetadata\n \nitems\n \n=\n \nawait\n \nclient\n.\nGetPackageMetadataAsync\n(\nNewtonsoft.Json\n);\n\n\nif\n \n(!\nitems\n.\nAny\n())\n\n\n{\n\n    \nConsole\n.\nWriteLine\n(\n$\nPackage \nNewtonsoft.Json\n does not exist\n);\n\n    \nreturn\n;\n\n\n}\n\n\n\nforeach\n \n(\nvar\n \nmetadata\n \nin\n \nitems\n)\n\n\n{\n\n    \nConsole\n.\nWriteLine\n(\n$\nVersion: {metadata.Version}\n);\n\n    \nConsole\n.\nWriteLine\n(\n$\nListed: {metadata.Listed}\n);\n\n    \nConsole\n.\nWriteLine\n(\n$\nTags: {metadata.Tags}\n);\n\n    \nConsole\n.\nWriteLine\n(\n$\nDescription: {metadata.Description}\n);\n\n\n}\n\n\n\n// Or, find the metadata for a single version of a package.\n\n\nstring\n \npackageId\n \n=\n \nNewtonsoft.Json\n\n\nNuGetVersion\n \npackageVersion\n \n=\n \nnew\n \nNuGetVersion\n(\n12.0.1\n);\n\n\n\nPackageMetadata\n \nmetadata\n \n=\n \nawait\n \nclient\n.\nGetPackageMetadataAsync\n(\npackageId\n,\n \npackageVersion\n);\n\n\n\nConsole\n.\nWriteLine\n(\n$\nListed: {metadata.Listed}\n);\n\n\nConsole\n.\nWriteLine\n(\n$\nTags: {metadata.Tags}\n);\n\n\nConsole\n.\nWriteLine\n(\n$\nDescription: {metadata.Description}\n);\n\n\n\n\n\n\nSearch for packages\n\n\nSearch for \"json\" packages:\n\n\nNuGetClient\n \nclient\n \n=\n \nnew\n \nNuGetClient\n(\nhttps://api.nuget.org/v3/index.json\n);\n\n\nSearchResponse\n \nresponse\n \n=\n \nawait\n \nclient\n.\nSearchAsync\n(\njson\n);\n\n\n\nConsole\n.\nWriteLine\n(\n$\nFound {response.TotalHits} total results\n);\n\n\n\nforeach\n \n(\nSearchResult\n \nsearchResult\n \nin\n \nresponse\n.\nData\n)\n\n\n{\n\n    \nConsole\n.\nWriteLine\n(\n$\nFound package {searchResult.Id} {searchResult.Version}\n);\n\n\n}", 
            "title": "BaGet SDK"
        }, 
        {
            "location": "/tools/sdk/#baget-sdk", 
            "text": "You can use BaGet's  BaGet.Protocol  package to interact with a NuGet server.", 
            "title": "BaGet SDK"
        }, 
        {
            "location": "/tools/sdk/#getting-started", 
            "text": "Install the  BaGet.Protocol  package:  dotnet add package BaGet.Protocol", 
            "title": "Getting Started"
        }, 
        {
            "location": "/tools/sdk/#list-package-versions", 
            "text": "Find all versions of the  Newtonsoft.Json  package:  NuGetClient   client   =   new   NuGetClient ( https://api.nuget.org/v3/index.json );  IReadOnlyList NuGetVersion   versions   =   await   client . ListPackageVersionsAsync ( Newtonsoft.Json );  foreach   ( NuGetVersion   version   in   versions )  { \n     Console . WriteLine ( $ Found version: {version} );  }", 
            "title": "List Package Versions"
        }, 
        {
            "location": "/tools/sdk/#download-a-package", 
            "text": "NuGetClient   client   =   new   NuGetClient ( https://api.nuget.org/v3/index.json );  string   packageId   =   Newtonsoft.Json ;  NuGetVersion   packageVersion   =   new   NuGetVersion ( 12.0.1 );  using   ( Stream   packageStream   =   await   client . GetPackageStreamAsync ( packageId ,   packageVersion ))  { \n     Console . WriteLine ( $ Downloaded package {packageId} {packageVersion} );  }", 
            "title": "Download a package"
        }, 
        {
            "location": "/tools/sdk/#find-package-metadata", 
            "text": "NuGetClient   client   =   new   NuGetClient ( https://api.nuget.org/v3/index.json );  // Find the metadata for all versions of a package.  IReadOnlyList PackageMetadata   items   =   await   client . GetPackageMetadataAsync ( Newtonsoft.Json );  if   (! items . Any ())  { \n     Console . WriteLine ( $ Package  Newtonsoft.Json  does not exist ); \n     return ;  }  foreach   ( var   metadata   in   items )  { \n     Console . WriteLine ( $ Version: {metadata.Version} ); \n     Console . WriteLine ( $ Listed: {metadata.Listed} ); \n     Console . WriteLine ( $ Tags: {metadata.Tags} ); \n     Console . WriteLine ( $ Description: {metadata.Description} );  }  // Or, find the metadata for a single version of a package.  string   packageId   =   Newtonsoft.Json  NuGetVersion   packageVersion   =   new   NuGetVersion ( 12.0.1 );  PackageMetadata   metadata   =   await   client . GetPackageMetadataAsync ( packageId ,   packageVersion );  Console . WriteLine ( $ Listed: {metadata.Listed} );  Console . WriteLine ( $ Tags: {metadata.Tags} );  Console . WriteLine ( $ Description: {metadata.Description} );", 
            "title": "Find Package Metadata"
        }, 
        {
            "location": "/tools/sdk/#search-for-packages", 
            "text": "Search for \"json\" packages:  NuGetClient   client   =   new   NuGetClient ( https://api.nuget.org/v3/index.json );  SearchResponse   response   =   await   client . SearchAsync ( json );  Console . WriteLine ( $ Found {response.TotalHits} total results );  foreach   ( SearchResult   searchResult   in   response . Data )  { \n     Console . WriteLine ( $ Found package {searchResult.Id} {searchResult.Version} );  }", 
            "title": "Search for packages"
        }, 
        {
            "location": "/vs/nugetorg/", 
            "text": "nuget.org\n\n\n\n\nWarning\n\n\nThis page is a work in progress!\n\n\n\n\nnuget.org\n, also known as the \"Gallery\", is the defacto feed to host open\nsource packages. You should publish NuGet packages for your open-source projects here.\n\n\nThe Gallery is battle-tested and proven to scale well. You can find a guide on how to host\nyour own Gallery instance on \nthe Gallery's wiki\n.\nYou can find the Gallery's code on GitHub:\n\n\n\n\nNuGet/NuGetGallery\n - the \nnuget.org\n\nwebsite and v2 APIs\n\n\nNuGet/NuGet.Jobs\n - the Gallery's jobs for things like validation and package statistics.\n\n\nNuGet/NuGet.Services.Metadata\n - NuGet's v3 implementation\n\n\nNuGet/ServerCommon\n - common libraries used across NuGet's services\n\n\n\n\nAs you can tell, nuget.org is a complex beast. Hosting your own instance of the Gallery is not for the faint of heart.\n\n\nBaGet vs nuget.org\n\n\nTODO. See \nthis issue\n for a deep-dive.\n\n\n\n\nBaGet only competes with \nNuGet/NuGet.Services.Metadata\n\n\nnuget.org's v3 implementation is static\n\n\nRuns only on Windows\n\n\nHighly tied to Azure\n\n\nScales reads to near infinity\n\n\nDoesn't scale well for writes\n\n\nStatic JSON files are hosted on Azure Blob Storage\n\n\nServed by a Content Delivery Network\n\n\nFiles are updated by \nfeed2catalog\n, \ncatalog2registration\n, \ncatalog2dnx\n, and \ncatalog2lucene\n jobs\n\n\n\n\n\n\nBaGet's v3 implementation is dynamic\n\n\nCross-platform implementation\n\n\nRequests are served by a service that queries a database\n\n\nSimpler architecture, which makes it easier to deploy and run small feeds\n\n\nEasier to scale for writes\n\n\nHarder to scale for reads\n\n\nEasier to add new features\n\n\nHarder to make as reliable", 
            "title": "nuget.org"
        }, 
        {
            "location": "/vs/nugetorg/#nugetorg", 
            "text": "Warning  This page is a work in progress!   nuget.org , also known as the \"Gallery\", is the defacto feed to host open\nsource packages. You should publish NuGet packages for your open-source projects here.  The Gallery is battle-tested and proven to scale well. You can find a guide on how to host\nyour own Gallery instance on  the Gallery's wiki .\nYou can find the Gallery's code on GitHub:   NuGet/NuGetGallery  - the  nuget.org \nwebsite and v2 APIs  NuGet/NuGet.Jobs  - the Gallery's jobs for things like validation and package statistics.  NuGet/NuGet.Services.Metadata  - NuGet's v3 implementation  NuGet/ServerCommon  - common libraries used across NuGet's services   As you can tell, nuget.org is a complex beast. Hosting your own instance of the Gallery is not for the faint of heart.", 
            "title": "nuget.org"
        }, 
        {
            "location": "/vs/nugetorg/#baget-vs-nugetorg", 
            "text": "TODO. See  this issue  for a deep-dive.   BaGet only competes with  NuGet/NuGet.Services.Metadata  nuget.org's v3 implementation is static  Runs only on Windows  Highly tied to Azure  Scales reads to near infinity  Doesn't scale well for writes  Static JSON files are hosted on Azure Blob Storage  Served by a Content Delivery Network  Files are updated by  feed2catalog ,  catalog2registration ,  catalog2dnx , and  catalog2lucene  jobs    BaGet's v3 implementation is dynamic  Cross-platform implementation  Requests are served by a service that queries a database  Simpler architecture, which makes it easier to deploy and run small feeds  Easier to scale for writes  Harder to scale for reads  Easier to add new features  Harder to make as reliable", 
            "title": "BaGet vs nuget.org"
        }, 
        {
            "location": "/vs/nugetserver/", 
            "text": "NuGet.Server\n\n\n\n\nWarning\n\n\nThis page is a work in progress!\n\n\n\n\nNuGet.Server\n is a lightweight standalone NuGet server. It is strongly recommended that you upgrade to BaGet if you use NuGet.Server. Feel free to open \nGitHub issues\n if you need help migrating.\n\n\n\n\nNuGet.Server\n\n\nOnly runs on Windows\n\n\nSupports NuGet v2 APIs (missing verified packages, signed packages, etc...)\n\n\nDoesn't support NuGet's v3 APIs\n\n\nDoes not scale well\n\n\nNot well documented\n\n\nNot well maintained\n\n\n\n\n\n\nBaGet\n\n\nCross-platform\n\n\nSupports NuGet v3 APIs\n\n\n\n\n\n\n\n\nUpgrade Guide\n\n\nTODO", 
            "title": "NuGet.Server"
        }, 
        {
            "location": "/vs/nugetserver/#nugetserver", 
            "text": "Warning  This page is a work in progress!   NuGet.Server  is a lightweight standalone NuGet server. It is strongly recommended that you upgrade to BaGet if you use NuGet.Server. Feel free to open  GitHub issues  if you need help migrating.   NuGet.Server  Only runs on Windows  Supports NuGet v2 APIs (missing verified packages, signed packages, etc...)  Doesn't support NuGet's v3 APIs  Does not scale well  Not well documented  Not well maintained    BaGet  Cross-platform  Supports NuGet v3 APIs", 
            "title": "NuGet.Server"
        }, 
        {
            "location": "/vs/nugetserver/#upgrade-guide", 
            "text": "TODO", 
            "title": "Upgrade Guide"
        }, 
        {
            "location": "/vs/azure-artifacts/", 
            "text": "Azure Artifacts\n\n\n\n\nWarning\n\n\nThis page is a work in progress!", 
            "title": "Azure Artifacts"
        }, 
        {
            "location": "/vs/azure-artifacts/#azure-artifacts", 
            "text": "Warning  This page is a work in progress!", 
            "title": "Azure Artifacts"
        }, 
        {
            "location": "/vs/myget/", 
            "text": "MyGet\n\n\n\n\nWarning\n\n\nThis page is a work in progress!", 
            "title": "MyGet"
        }, 
        {
            "location": "/vs/myget/#myget", 
            "text": "Warning  This page is a work in progress!", 
            "title": "MyGet"
        }, 
        {
            "location": "/vs/liget/", 
            "text": "LiGet\n\n\n\n\nWarning\n\n\nThis page is a work in progress!\n\n\n\n\nLiGet\n is a NuGet server created with a linux-first approach.\n\n\n\n\nLiGet\n\n\nStrong support for Paket\n\n\nOnly supports NuGet's v2 APIs (missing verified packages, signed packages, etc...)\n\n\nStores all packages' metadata using a single JSON file\n\n\n\n\n\n\nBaGet\n\n\nSupports NuGet's v3 APIs\n\n\nStores packages' metadata in a database\n\n\nCapable of ingesting all packages on nuget.org\n\n\nCan run on Azure", 
            "title": "LiGet"
        }, 
        {
            "location": "/vs/liget/#liget", 
            "text": "Warning  This page is a work in progress!   LiGet  is a NuGet server created with a linux-first approach.   LiGet  Strong support for Paket  Only supports NuGet's v2 APIs (missing verified packages, signed packages, etc...)  Stores all packages' metadata using a single JSON file    BaGet  Supports NuGet's v3 APIs  Stores packages' metadata in a database  Capable of ingesting all packages on nuget.org  Can run on Azure", 
            "title": "LiGet"
        }, 
        {
            "location": "/vs/artifactory/", 
            "text": "Artifactory\n\n\n\n\nWarning\n\n\nThis page is a work in progress!", 
            "title": "Artifactory"
        }, 
        {
            "location": "/vs/artifactory/#artifactory", 
            "text": "Warning  This page is a work in progress!", 
            "title": "Artifactory"
        }, 
        {
            "location": "/vs/nexus/", 
            "text": "Nexus\n\n\n\n\nWarning\n\n\nThis page is a work in progress!", 
            "title": "Nexus"
        }, 
        {
            "location": "/vs/nexus/#nexus", 
            "text": "Warning  This page is a work in progress!", 
            "title": "Nexus"
        }, 
        {
            "location": "/vs/teamcity/", 
            "text": "TeamCity\n\n\n\n\nWarning\n\n\nThis page is a work in progress!", 
            "title": "TeamCity"
        }, 
        {
            "location": "/vs/teamcity/#teamcity", 
            "text": "Warning  This page is a work in progress!", 
            "title": "TeamCity"
        }
    ]
}
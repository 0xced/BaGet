{
    "docs": [
        {
            "location": "/", 
            "text": "BaGet\n\n\nGetting Started\n\n\n\n\nInstall \n.NET Core SDK\n\n\nDownload and extract \nBaGet's latest release\n\n\nStart the service with \ndotnet BaGet.dll\n\n\nBrowse \nhttp://localhost:5000/\n in your browser\n\n\n\n\nPushing Packages\n\n\nYou can push a package using this command:\n\n\ndotnet nuget push -s http://localhost:5000/v3/index.json newtonsoft.json.11.0.2.nupkg\n\n\n\n\n\nUsing BaGet as a Symbol Server\n\n\nYou can use BaGet as a Symbol Server by uploading\n\nsymbol packages\n.\nAfter you've pushed a package to BaGet, you can push its corresponding\nsymbol package using this command:\n\n\ndotnet nuget push -s http://localhost:5000/v3/index.json symbol.package.1.0.0.snupkg\n\n\n\n\n\nYou will need to add the symbol location \nhttp://localhost:5000/api/download/symbols\n to load symbols from BaGet.\n\nUse this guide\n for Visual Studio.\n\n\nRunning BaGet on Docker\n\n\nIf you'd like, you can run BaGet on Docker:\n\n\n\n\nPull the latest \ndocker image\n:\n\n\n\n\ndocker pull loicsharma/baget\n\n\n\n\n\n\n\nCreate a file named \nbaget.env\n with the content:\n\n\n\n\nApiKey=NUGET-SERVER-API-KEY\nStorage__Type=FileSystem\nStorage__Path=/var/baget/packages\nDatabase__Type=Sqlite\nDatabase__ConnectionString=Data Source=/var/baget/baget.db\nSearch__Type=Database\n\n\n\n\n\n\n\nInfo\n\n\nThe \nbaget.env\n file stores \nBaGet's configuration\n as environment\nvariables. To learn how these configurations work, please refer to\n\nASP.NET Core's Configuration documentation\n.\n\n\n\n\n\n\nCreate a folder named \nbaget-data\n\n\nRun:\n\n\n\n\ndocker run --rm --name nuget-server -p 5555:80 --env-file baget.env -v \n$(pwd)/baget-data:/var/baget\n loicsharma/baget:latest\n\n\n\n\n\n\n\nPush your first package with:\n\n\n\n\ndotnet nuget push -s http://localhost:5555/v3/index.json -k NUGET-SERVER-API-KEY newtonsoft.json.11.0.2.nupkg\n\n\n\n\n\n\n\nOpen the URL \nhttp://localhost:5555/\n in your browser", 
            "title": "BaGet"
        }, 
        {
            "location": "/#baget", 
            "text": "", 
            "title": "BaGet"
        }, 
        {
            "location": "/#getting-started", 
            "text": "Install  .NET Core SDK  Download and extract  BaGet's latest release  Start the service with  dotnet BaGet.dll  Browse  http://localhost:5000/  in your browser", 
            "title": "Getting Started"
        }, 
        {
            "location": "/#pushing-packages", 
            "text": "You can push a package using this command:  dotnet nuget push -s http://localhost:5000/v3/index.json newtonsoft.json.11.0.2.nupkg", 
            "title": "Pushing Packages"
        }, 
        {
            "location": "/#using-baget-as-a-symbol-server", 
            "text": "You can use BaGet as a Symbol Server by uploading symbol packages .\nAfter you've pushed a package to BaGet, you can push its corresponding\nsymbol package using this command:  dotnet nuget push -s http://localhost:5000/v3/index.json symbol.package.1.0.0.snupkg  You will need to add the symbol location  http://localhost:5000/api/download/symbols  to load symbols from BaGet. Use this guide  for Visual Studio.", 
            "title": "Using BaGet as a Symbol Server"
        }, 
        {
            "location": "/#running-baget-on-docker", 
            "text": "If you'd like, you can run BaGet on Docker:   Pull the latest  docker image :   docker pull loicsharma/baget   Create a file named  baget.env  with the content:   ApiKey=NUGET-SERVER-API-KEY\nStorage__Type=FileSystem\nStorage__Path=/var/baget/packages\nDatabase__Type=Sqlite\nDatabase__ConnectionString=Data Source=/var/baget/baget.db\nSearch__Type=Database   Info  The  baget.env  file stores  BaGet's configuration  as environment\nvariables. To learn how these configurations work, please refer to ASP.NET Core's Configuration documentation .    Create a folder named  baget-data  Run:   docker run --rm --name nuget-server -p 5555:80 --env-file baget.env -v  $(pwd)/baget-data:/var/baget  loicsharma/baget:latest   Push your first package with:   dotnet nuget push -s http://localhost:5555/v3/index.json -k NUGET-SERVER-API-KEY newtonsoft.json.11.0.2.nupkg   Open the URL  http://localhost:5555/  in your browser", 
            "title": "Running BaGet on Docker"
        }, 
        {
            "location": "/configuration/", 
            "text": "Configuration\n\n\nYou can modify BaGet's configurations by editing the \nappsettings.json\n file.\n\n\nRequiring an API key\n\n\nYou can require that users provide a password, called an API key, to publish packages.\nTo do so, you can insert the desired API key in the \nApiKey\n field.\n\n\n{\n\n    \nApiKey\n:\n \nNUGET-SERVER-API-KEY\n,\n\n    \n...\n\n\n}\n\n\n\n\n\n\nUsers will now have to provide the API key to push packages:\n\n\ndotnet\n \nnuget\n \npush\n \n-\ns\n \nhttp\n:\n//localhost:5000/v3/index.json -k NUGET-SERVER-API-KEY newtonsoft.json.11.0.2.nupkg\n\n\n\n\n\n\nEnabling Read-Through Caching\n\n\nRead-through caching lets you index packages from an upstream source. You can use read-through\ncaching to:\n\n\n\n\nSpeed up your builds if restores from \nnuget.org\n are slow\n\n\nEnable package restores in offline scenarios\n\n\n\n\nThe following \nMirror\n settings configures BaGet to index packages from \nnuget.org\n:\n\n\n{\n\n    \n...\n\n\n    \nMirror\n:\n \n{\n\n        \nEnabled\n:\n  \ntrue\n,\n\n        \nPackageSource\n:\n \nhttps://api.nuget.org/v3/index.json\n\n    \n},\n\n\n    \n...\n\n\n}\n\n\n\n\n\n\n\n\nInfo\n\n\nPackageSource\n is the value of the \nNuGet service index\n.\n\n\n\n\nEnabling Package Hard Deletions\n\n\nTo prevent the \n\"left pad\" problem\n,\nBaGet's default configuration doesn't allow package deletions. Whenever BaGet receives a package deletion\nrequest, it will instead \"unlist\" the package. An unlisted package is undiscoverable but can still be\ndownloaded if you know the package's id and version. You can override this behavior by setting the\n\nPackageDeletionBehavior\n:\n\n\n{\n\n    \n...\n\n\n    \nPackageDeletionBehavior\n:\n \nHardDelete\n,\n\n\n    \n...\n\n\n}\n\n\n\n\n\n\nEnabling Package Overwrites\n\n\nNormally, BaGet will reject a package upload if the id and version is already taken. You can configure BaGet\nto overwrite the already existing package by setting \nAllowPackageOverwrites\n:\n\n\n{\n\n    \n...\n\n\n    \nAllowPackageOverwrites\n:\n \ntrue\n,\n\n\n    \n...\n\n\n}", 
            "title": "Configuration"
        }, 
        {
            "location": "/configuration/#configuration", 
            "text": "You can modify BaGet's configurations by editing the  appsettings.json  file.", 
            "title": "Configuration"
        }, 
        {
            "location": "/configuration/#requiring-an-api-key", 
            "text": "You can require that users provide a password, called an API key, to publish packages.\nTo do so, you can insert the desired API key in the  ApiKey  field.  { \n     ApiKey :   NUGET-SERVER-API-KEY , \n     ...  }   Users will now have to provide the API key to push packages:  dotnet   nuget   push   - s   http : //localhost:5000/v3/index.json -k NUGET-SERVER-API-KEY newtonsoft.json.11.0.2.nupkg", 
            "title": "Requiring an API key"
        }, 
        {
            "location": "/configuration/#enabling-read-through-caching", 
            "text": "Read-through caching lets you index packages from an upstream source. You can use read-through\ncaching to:   Speed up your builds if restores from  nuget.org  are slow  Enable package restores in offline scenarios   The following  Mirror  settings configures BaGet to index packages from  nuget.org :  { \n     ... \n\n     Mirror :   { \n         Enabled :    true , \n         PackageSource :   https://api.nuget.org/v3/index.json \n     }, \n\n     ...  }    Info  PackageSource  is the value of the  NuGet service index .", 
            "title": "Enabling Read-Through Caching"
        }, 
        {
            "location": "/configuration/#enabling-package-hard-deletions", 
            "text": "To prevent the  \"left pad\" problem ,\nBaGet's default configuration doesn't allow package deletions. Whenever BaGet receives a package deletion\nrequest, it will instead \"unlist\" the package. An unlisted package is undiscoverable but can still be\ndownloaded if you know the package's id and version. You can override this behavior by setting the PackageDeletionBehavior :  { \n     ... \n\n     PackageDeletionBehavior :   HardDelete , \n\n     ...  }", 
            "title": "Enabling Package Hard Deletions"
        }, 
        {
            "location": "/configuration/#enabling-package-overwrites", 
            "text": "Normally, BaGet will reject a package upload if the id and version is already taken. You can configure BaGet\nto overwrite the already existing package by setting  AllowPackageOverwrites :  { \n     ... \n\n     AllowPackageOverwrites :   true , \n\n     ...  }", 
            "title": "Enabling Package Overwrites"
        }, 
        {
            "location": "/private-feeds/", 
            "text": "Private Feeds\n\n\n\n\nWarning\n\n\nThis page is a work in progress! See \nthis pull request\n for more information.\n\n\n\n\n\n\nTip\n\n\nRefer to the \nAPI key\n documentation if you'd like to require an API key to push packages.\n\n\n\n\nA private feed requires users to authenticate before accessing packages. BaGet supports the following authentication providers:\n\n\n\n\nAzure Active Directory\n\n\n\n\nAzure Active Directory\n\n\nSetup\n\n\n\n\nBuild Azure Active Directory apps\n\n\nRegister the users on the tenant\n\n\nGet the tenant id, app ids, etc..\n\n\n\n\nConfiguration\n\n\n\n\nConfigure BaGet\n\n\nConfigure the NuGet plugin", 
            "title": "Private Feeds"
        }, 
        {
            "location": "/private-feeds/#private-feeds", 
            "text": "Warning  This page is a work in progress! See  this pull request  for more information.    Tip  Refer to the  API key  documentation if you'd like to require an API key to push packages.   A private feed requires users to authenticate before accessing packages. BaGet supports the following authentication providers:   Azure Active Directory", 
            "title": "Private Feeds"
        }, 
        {
            "location": "/private-feeds/#azure-active-directory", 
            "text": "", 
            "title": "Azure Active Directory"
        }, 
        {
            "location": "/private-feeds/#setup", 
            "text": "Build Azure Active Directory apps  Register the users on the tenant  Get the tenant id, app ids, etc..", 
            "title": "Setup"
        }, 
        {
            "location": "/private-feeds/#configuration", 
            "text": "Configure BaGet  Configure the NuGet plugin", 
            "title": "Configuration"
        }, 
        {
            "location": "/cloud/azure/", 
            "text": "Running BaGet on Azure\n\n\n\n\nWarning\n\n\nThis page is a work in progress!\n\n\n\n\nUse Azure to scale BaGet to nuget.org scale. You can configure BaGet to store metadata on \nAzure SQL Database\n, upload packages to \nAzure Blob Storage\n, and provide powerful search using \nAzure Search\n.\n\n\nAzure SQL Database\n\n\nUpdate the \nappsettings.json\n file:\n\n\n{\n\n    \n...\n\n\n    \nDatabase\n:\n \n{\n\n        \nType\n:\n \nSqlServer\n,\n\n        \nConnectionString\n:\n \n...\n\n    \n},\n\n\n    \n...\n\n\n}\n\n\n\n\n\n\nAzure Blob Storage\n\n\nUpdate the \nappsettings.json\n file:\n\n\n{\n\n    \n...\n\n\n    \nStorage\n:\n \n{\n\n        \nType\n:\n \nAzureBlobStorage\n,\n\n        \nAccountName\n:\n \nmy-account\n,\n\n        \nContainer\n:\n \nmy-container\n,\n\n        \nAccessKey\n:\n \nabcd1234\n\n    \n},\n\n\n    \n...\n\n\n}\n\n\n\n\n\n\nAzure Search\n\n\nUpdate the \nappsettings.json\n file:\n\n\n{\n\n    \n...\n\n\n    \nSearch\n:\n \n{\n\n        \nType\n:\n \nAzure\n,\n\n        \nAccountName\n:\n \nmy-account\n,\n\n        \nApiKey\n:\n \nABCD1234\n\n    \n},\n\n\n    \n...\n\n\n}\n\n\n\n\n\n\nTODO\n\n\n\n\nApp Service\n\n\nHigh availibility setup", 
            "title": "Azure"
        }, 
        {
            "location": "/cloud/azure/#running-baget-on-azure", 
            "text": "Warning  This page is a work in progress!   Use Azure to scale BaGet to nuget.org scale. You can configure BaGet to store metadata on  Azure SQL Database , upload packages to  Azure Blob Storage , and provide powerful search using  Azure Search .", 
            "title": "Running BaGet on Azure"
        }, 
        {
            "location": "/cloud/azure/#azure-sql-database", 
            "text": "Update the  appsettings.json  file:  { \n     ... \n\n     Database :   { \n         Type :   SqlServer , \n         ConnectionString :   ... \n     }, \n\n     ...  }", 
            "title": "Azure SQL Database"
        }, 
        {
            "location": "/cloud/azure/#azure-blob-storage", 
            "text": "Update the  appsettings.json  file:  { \n     ... \n\n     Storage :   { \n         Type :   AzureBlobStorage , \n         AccountName :   my-account , \n         Container :   my-container , \n         AccessKey :   abcd1234 \n     }, \n\n     ...  }", 
            "title": "Azure Blob Storage"
        }, 
        {
            "location": "/cloud/azure/#azure-search", 
            "text": "Update the  appsettings.json  file:  { \n     ... \n\n     Search :   { \n         Type :   Azure , \n         AccountName :   my-account , \n         ApiKey :   ABCD1234 \n     }, \n\n     ...  }", 
            "title": "Azure Search"
        }, 
        {
            "location": "/cloud/azure/#todo", 
            "text": "App Service  High availibility setup", 
            "title": "TODO"
        }, 
        {
            "location": "/cloud/gcp/", 
            "text": "Running BaGet on Google Cloud\n\n\n\n\nWarning\n\n\nThis page is a work in progress!\n\n\n\n\nWe're open source and accept contributions!\n\nFork us on GitHub\n.\n\n\nBefore you begin, you should decide \nwhich AppEngine region\n\nyou're going to use. For best performance, Cloud Storage and Cloud SQL should be located\nin the same region as your AppEngine deployment.\n\n\nGoogle Cloud Storage\n\n\nPackages can be stored in \nGoogle Cloud Storage\n.\n\n\nSetup\n\n\nFollow the instructions in \nUsing Cloud Storage\n to create a bucket.\n\n\nConfiguration\n\n\nNOTE:\n If you plan to use AppEngine, skip this part and follow the AppEngine instructions below.\n\n\nSet up a service account and download credentials. Set the \nGOOGLE_APPLICATION_CREDENTIALS\n environment variable to the path to the JSON file you downloaded.\n\n\nConfigure BaGet to use GCS by updating the \nappsettings.json\n file:\n\n\n{\n\n    \n...\n\n\n    \nStorage\n:\n \n{\n\n        \nType\n:\n \nGoogleCloud\n,\n\n        \nBucketName\n:\n \nyour-gcs-bucket\n\n    \n},\n\n\n    \n...\n\n\n}\n\n\n\n\n\n\nGoogle Cloud SQL\n\n\n\n\nFollow the instructions in \nUsing Cloud SQL\n to create a 2nd Gen MySQL 5.7 Google Cloud SQL instance. The default options should work well.\n\n\nCreate a database named \nbaget\n. This can be done through the Google Cloud Console. Use \nutf8mb4\n as the Character set.\n\n\nFollow \nConfiguring SSL/TLS\n to create a client certificate. Download the three files it creates.\n\n\nConvert the PEM to a PFX by running \nopenssl pkcs12 -inkey client-key.pem -in client-cert.pem -export -out client.pfx\n\n\nOne way to obtain OpenSSL on Windows is to install \nGit Bash\n.\n\n\nConfigure BaGet to use Google Cloud SQL by updating the \nappsettings.json\n file:\n\n\n\n\n{\n\n    \n...\n\n    \nDatabase\n:\n \n{\n\n        \nType\n:\n \nMySql\n,\n\n        \nConnectionString\n:\n \nServer=YOURIP;User Id=root;Password=***;Database=baget;CertificateFile=C:\\\\Path\\\\To\\\\client.pfx;CACertificateFile=C:\\\\Path\\\\To\\\\server-ca.pem;SSL Mode=VerifyCA\n\n    \n},\n\n    \n...\n\n\n}\n\n\n\n\n\n\n\n\nCreate the tables by running \ndotnet ef database update --context MySqlContext --project src\\BaGet\n\n\n\n\nGoogle AppEngine\n\n\nBaGet can be hosted in Google AppEngine. See \nhere\n\nfor a tutorial on how to create a new AppEngine project.\n\n\nCreate a \napp.yaml\n file to publish the Docker container built by the Dockerfile in this repo. In the template\nbelow, make the following replacements:\n\n\n\n\nPROJECT\n - your GCP project, as returned by \ngcloud config get-value project\n\n\nREGION\n -- the GCP region your Google Cloud SQL database is in, e.g., \nus-central1\n or \nus-west2\n\n\nDBINSTANCE\n -- the name of your Google Cloud SQL database instance\n\n\nDBNAME\n -- the name of the BaGet database on that instance (e.g., \nbaget\n in the instructions above)\n\n\nPASSWORD\n -- the password for the database root user\n\n\nBUCKETNAME\n -- the name of the Google Cloud Storage Bucket configured above\n\n\n\n\nruntime\n:\n \ncustom\n\n\nenv\n:\n \nflex\n\n\n\n# The settings below are to reduce costs during testing and are not necessarily\n\n\n# appropriate for production use. For more information, see:\n\n\n# https://cloud.google.com/appengine/docs/flexible/dotnet/configuring-your-app-with-app-yaml\n\n\nresources\n:\n\n  \ncpu\n:\n \n1\n\n  \nmemory_gb\n:\n \n0.5\n\n  \ndisk_size_gb\n:\n \n10\n\n\n\nbeta_settings\n:\n\n  \ncloud_sql_instances\n:\n \nPROJECT:REGION:DBINSTANCE\n\n\n\nenv_variables\n:\n\n  \nDatabase__Type\n:\n \nMySql\n\n  \nDatabase__ConnectionString\n:\n \nServer=/cloudsql/PROJECT:REGION:DBINSTANCE;User\n \nId=root;Password=PASSWORD;Database=DBNAME;SslMode=None\n\n  \nStorage__Type\n:\n \nGoogleCloud\n\n  \nStorage__BucketName\n:\n \nBUCKETNAME\n\n  \nSearch__Type\n:\n \nDatabase\n\n  \nASPNETCORE_URLS\n:\n \nhttp://0.0.0.0:8080\n\n\n\n\n\n\nTo publish the application, run \ngcloud app deploy\n.", 
            "title": "Google Cloud"
        }, 
        {
            "location": "/cloud/gcp/#running-baget-on-google-cloud", 
            "text": "Warning  This page is a work in progress!   We're open source and accept contributions! Fork us on GitHub .  Before you begin, you should decide  which AppEngine region \nyou're going to use. For best performance, Cloud Storage and Cloud SQL should be located\nin the same region as your AppEngine deployment.", 
            "title": "Running BaGet on Google Cloud"
        }, 
        {
            "location": "/cloud/gcp/#google-cloud-storage", 
            "text": "Packages can be stored in  Google Cloud Storage .", 
            "title": "Google Cloud Storage"
        }, 
        {
            "location": "/cloud/gcp/#setup", 
            "text": "Follow the instructions in  Using Cloud Storage  to create a bucket.", 
            "title": "Setup"
        }, 
        {
            "location": "/cloud/gcp/#configuration", 
            "text": "NOTE:  If you plan to use AppEngine, skip this part and follow the AppEngine instructions below.  Set up a service account and download credentials. Set the  GOOGLE_APPLICATION_CREDENTIALS  environment variable to the path to the JSON file you downloaded.  Configure BaGet to use GCS by updating the  appsettings.json  file:  { \n     ... \n\n     Storage :   { \n         Type :   GoogleCloud , \n         BucketName :   your-gcs-bucket \n     }, \n\n     ...  }", 
            "title": "Configuration"
        }, 
        {
            "location": "/cloud/gcp/#google-cloud-sql", 
            "text": "Follow the instructions in  Using Cloud SQL  to create a 2nd Gen MySQL 5.7 Google Cloud SQL instance. The default options should work well.  Create a database named  baget . This can be done through the Google Cloud Console. Use  utf8mb4  as the Character set.  Follow  Configuring SSL/TLS  to create a client certificate. Download the three files it creates.  Convert the PEM to a PFX by running  openssl pkcs12 -inkey client-key.pem -in client-cert.pem -export -out client.pfx  One way to obtain OpenSSL on Windows is to install  Git Bash .  Configure BaGet to use Google Cloud SQL by updating the  appsettings.json  file:   { \n     ... \n     Database :   { \n         Type :   MySql , \n         ConnectionString :   Server=YOURIP;User Id=root;Password=***;Database=baget;CertificateFile=C:\\\\Path\\\\To\\\\client.pfx;CACertificateFile=C:\\\\Path\\\\To\\\\server-ca.pem;SSL Mode=VerifyCA \n     }, \n     ...  }    Create the tables by running  dotnet ef database update --context MySqlContext --project src\\BaGet", 
            "title": "Google Cloud SQL"
        }, 
        {
            "location": "/cloud/gcp/#google-appengine", 
            "text": "BaGet can be hosted in Google AppEngine. See  here \nfor a tutorial on how to create a new AppEngine project.  Create a  app.yaml  file to publish the Docker container built by the Dockerfile in this repo. In the template\nbelow, make the following replacements:   PROJECT  - your GCP project, as returned by  gcloud config get-value project  REGION  -- the GCP region your Google Cloud SQL database is in, e.g.,  us-central1  or  us-west2  DBINSTANCE  -- the name of your Google Cloud SQL database instance  DBNAME  -- the name of the BaGet database on that instance (e.g.,  baget  in the instructions above)  PASSWORD  -- the password for the database root user  BUCKETNAME  -- the name of the Google Cloud Storage Bucket configured above   runtime :   custom  env :   flex  # The settings below are to reduce costs during testing and are not necessarily  # appropriate for production use. For more information, see:  # https://cloud.google.com/appengine/docs/flexible/dotnet/configuring-your-app-with-app-yaml  resources : \n   cpu :   1 \n   memory_gb :   0.5 \n   disk_size_gb :   10  beta_settings : \n   cloud_sql_instances :   PROJECT:REGION:DBINSTANCE  env_variables : \n   Database__Type :   MySql \n   Database__ConnectionString :   Server=/cloudsql/PROJECT:REGION:DBINSTANCE;User   Id=root;Password=PASSWORD;Database=DBNAME;SslMode=None \n   Storage__Type :   GoogleCloud \n   Storage__BucketName :   BUCKETNAME \n   Search__Type :   Database \n   ASPNETCORE_URLS :   http://0.0.0.0:8080   To publish the application, run  gcloud app deploy .", 
            "title": "Google AppEngine"
        }, 
        {
            "location": "/cloud/aws/", 
            "text": "Running BaGet on AWS\n\n\n\n\nWarning\n\n\nThis page is a work in progress!\n\n\n\n\nAmazon S3\n\n\nYou can configure BaGet to store uploaded packages on \nAmazon S3\n\nby updating the \nappsettings.json\n file:\n\n\n{\n\n    \n...\n\n\n    \nStorage\n:\n \n{\n\n        \nType\n:\n \nAwsS3\n,\n\n        \nRegion\n:\n \nus-west-1\n,\n\n        \nBucket\n:\n \nfoo\n,\n\n        \nAccessKey\n:\n \n,\n\n        \nSecretKey\n:\n \n\n    \n},\n\n\n    \n...\n\n\n}", 
            "title": "AWS"
        }, 
        {
            "location": "/cloud/aws/#running-baget-on-aws", 
            "text": "Warning  This page is a work in progress!", 
            "title": "Running BaGet on AWS"
        }, 
        {
            "location": "/cloud/aws/#amazon-s3", 
            "text": "You can configure BaGet to store uploaded packages on  Amazon S3 \nby updating the  appsettings.json  file:  { \n     ... \n\n     Storage :   { \n         Type :   AwsS3 , \n         Region :   us-west-1 , \n         Bucket :   foo , \n         AccessKey :   , \n         SecretKey :   \n     }, \n\n     ...  }", 
            "title": "Amazon S3"
        }, 
        {
            "location": "/windows/iis-proxy/", 
            "text": "Windows IIS Proxy\n\n\nRunning BaGet behind IIS as a proxy on Windows may require a few extra steps, however it may be advantageous because IIS will automatically manage restarting the server for you on reboots, etc.\n\n\nIIS Setup\n\n\nEnsure that the required \n.Net Core runtime\n is installed on the web server (currently known as the Windows Hosting Bundle installer).\n\n\nCopy the BaGet directory over to your hosting area such as \nC:\\Inetpub\\wwwroot\\BaGet\n\n\nUsing IIS Manager, create a new Application Pool:\n\n\n\n\nName = BaGetAppPool (can be whatever you want)\n\n\n.Net CLR version = No Managed Code\n\n\nManaged Pipeline Mode = Integrated\n\n\nStart application pool immediately = checked\n\n\n\n\nUsing IIS Manager, create a new web site:\n\n\n\n\nChoose your site name and physical path\n\n\nChoose BaGetAppPool as the application pool\n\n\nIn the Binding area, enter the default BaGet port of 5000\n\n\n\n\nBaGet Folder permissions\n\n\nIn order for the app to create the appropriate NuGet package folder, as well as create various files (SQLite database for example) you \nmay\n need to give special rights to the top level BaGet folder. \n\n\nRead under, \"Application Pools\" and, \"Application Pool Identity\" \nhere\n. Basically the identity used in the app pool isn't a real user account and doesn't show up in the Windows User Management Console.\n\n\nAlternative NuGet package Storage Paths\n\n\nNote that Virtual Directories will not work with IIS and Kestrel. Read more about that \nhere\n\n\nEnsure that the configuration storage Path uses appropriate forward slashes in the settings such as:\n\n\n...\n\n  \nStorage\n:\n \n{\n\n    \nType\n:\n \nFileSystem\n,\n\n    \nPath\n:\n \nC://AnotherFolder/Packages\n\n  \n},\n\n\n...\n\n\n\n\n\n\nNote if a folder is created outside of the BaGet top level directory, you will definitely need to adjust folder permissions stated above.", 
            "title": "Windows IIS Proxy"
        }, 
        {
            "location": "/windows/iis-proxy/#windows-iis-proxy", 
            "text": "Running BaGet behind IIS as a proxy on Windows may require a few extra steps, however it may be advantageous because IIS will automatically manage restarting the server for you on reboots, etc.", 
            "title": "Windows IIS Proxy"
        }, 
        {
            "location": "/windows/iis-proxy/#iis-setup", 
            "text": "Ensure that the required  .Net Core runtime  is installed on the web server (currently known as the Windows Hosting Bundle installer).  Copy the BaGet directory over to your hosting area such as  C:\\Inetpub\\wwwroot\\BaGet  Using IIS Manager, create a new Application Pool:   Name = BaGetAppPool (can be whatever you want)  .Net CLR version = No Managed Code  Managed Pipeline Mode = Integrated  Start application pool immediately = checked   Using IIS Manager, create a new web site:   Choose your site name and physical path  Choose BaGetAppPool as the application pool  In the Binding area, enter the default BaGet port of 5000", 
            "title": "IIS Setup"
        }, 
        {
            "location": "/windows/iis-proxy/#baget-folder-permissions", 
            "text": "In order for the app to create the appropriate NuGet package folder, as well as create various files (SQLite database for example) you  may  need to give special rights to the top level BaGet folder.   Read under, \"Application Pools\" and, \"Application Pool Identity\"  here . Basically the identity used in the app pool isn't a real user account and doesn't show up in the Windows User Management Console.", 
            "title": "BaGet Folder permissions"
        }, 
        {
            "location": "/windows/iis-proxy/#alternative-nuget-package-storage-paths", 
            "text": "Note that Virtual Directories will not work with IIS and Kestrel. Read more about that  here  Ensure that the configuration storage Path uses appropriate forward slashes in the settings such as:  ... \n   Storage :   { \n     Type :   FileSystem , \n     Path :   C://AnotherFolder/Packages \n   },  ...   Note if a folder is created outside of the BaGet top level directory, you will definitely need to adjust folder permissions stated above.", 
            "title": "Alternative NuGet package Storage Paths"
        }, 
        {
            "location": "/tools/mirroring/", 
            "text": "Mirroring nuget.org\n\n\n\n\nWarning\n\n\nThis page is a work in progress!\n\n\n\n\nImporting package downloads from nuget.org\n\n\nYou can import package downloads from nuget.org:\n\n\n\n\nNavigate to \n.\\BaGet\\src\\BaGet\n\n\nRun:\n\n\n\n\ndotnet run -- import-downloads\n\n\n\n\n\nIndexing nuget.org\n\n\n\n\nTODO Check-in code\n\n\nExplain scaling\n\n\nRebuild indexes at end\n\n\nImporting downloads from nuget.org", 
            "title": "Mirroring"
        }, 
        {
            "location": "/tools/mirroring/#mirroring-nugetorg", 
            "text": "Warning  This page is a work in progress!", 
            "title": "Mirroring nuget.org"
        }, 
        {
            "location": "/tools/mirroring/#importing-package-downloads-from-nugetorg", 
            "text": "You can import package downloads from nuget.org:   Navigate to  .\\BaGet\\src\\BaGet  Run:   dotnet run -- import-downloads", 
            "title": "Importing package downloads from nuget.org"
        }, 
        {
            "location": "/tools/mirroring/#indexing-nugetorg", 
            "text": "TODO Check-in code  Explain scaling  Rebuild indexes at end  Importing downloads from nuget.org", 
            "title": "Indexing nuget.org"
        }, 
        {
            "location": "/vs/nugetorg/", 
            "text": "nuget.org\n\n\n\n\nWarning\n\n\nThis page is a work in progress!\n\n\n\n\nnuget.org\n, also known as the \"Gallery\", is the defacto feed to host open\nsource packages. You should publish NuGet packages for your open-source projects here.\n\n\nThe Gallery is battle-tested and proven to scale well. You can find a guide on how to host\nyour own Gallery instance on \nthe Gallery's wiki\n.\nYou can find the Gallery's code on GitHub:\n\n\n\n\nNuGet/NuGetGallery\n - the \nnuget.org\n\nwebsite and v2 APIs\n\n\nNuGet/NuGet.Jobs\n - the Gallery's jobs for things like validation and package statistics.\n\n\nNuGet/NuGet.Services.Metadata\n - NuGet's v3 implementation\n\n\nNuGet/ServerCommon\n - common libraries used across NuGet's services\n\n\n\n\nAs you can tell, nuget.org is a complex beast. Hosting your own instance of the Gallery is not for the faint of heart.\n\n\nBaGet vs nuget.org\n\n\nTODO. See \nthis issue\n for a deep-dive.\n\n\n\n\nBaGet only competes with \nNuGet/NuGet.Services.Metadata\n\n\nnuget.org's v3 implementation is static\n\n\nRuns only on Windows\n\n\nHighly tied to Azure\n\n\nScales reads to near infinity\n\n\nDoesn't scale well for writes\n\n\nStatic JSON files are hosted on Azure Blob Storage\n\n\nServed by a Content Delivery Network\n\n\nFiles are updated by \nfeed2catalog\n, \ncatalog2registration\n, \ncatalog2dnx\n, and \ncatalog2lucene\n jobs\n\n\n\n\n\n\nBaGet's v3 implementation is dynamic\n\n\nCross-platform implementation\n\n\nRequests are served by a service that queries a database\n\n\nSimpler architecture, which makes it easier to deploy and run small feeds\n\n\nEasier to scale for writes\n\n\nHarder to scale for reads\n\n\nEasier to add new features\n\n\nHarder to make as reliable", 
            "title": "nuget.org"
        }, 
        {
            "location": "/vs/nugetorg/#nugetorg", 
            "text": "Warning  This page is a work in progress!   nuget.org , also known as the \"Gallery\", is the defacto feed to host open\nsource packages. You should publish NuGet packages for your open-source projects here.  The Gallery is battle-tested and proven to scale well. You can find a guide on how to host\nyour own Gallery instance on  the Gallery's wiki .\nYou can find the Gallery's code on GitHub:   NuGet/NuGetGallery  - the  nuget.org \nwebsite and v2 APIs  NuGet/NuGet.Jobs  - the Gallery's jobs for things like validation and package statistics.  NuGet/NuGet.Services.Metadata  - NuGet's v3 implementation  NuGet/ServerCommon  - common libraries used across NuGet's services   As you can tell, nuget.org is a complex beast. Hosting your own instance of the Gallery is not for the faint of heart.", 
            "title": "nuget.org"
        }, 
        {
            "location": "/vs/nugetorg/#baget-vs-nugetorg", 
            "text": "TODO. See  this issue  for a deep-dive.   BaGet only competes with  NuGet/NuGet.Services.Metadata  nuget.org's v3 implementation is static  Runs only on Windows  Highly tied to Azure  Scales reads to near infinity  Doesn't scale well for writes  Static JSON files are hosted on Azure Blob Storage  Served by a Content Delivery Network  Files are updated by  feed2catalog ,  catalog2registration ,  catalog2dnx , and  catalog2lucene  jobs    BaGet's v3 implementation is dynamic  Cross-platform implementation  Requests are served by a service that queries a database  Simpler architecture, which makes it easier to deploy and run small feeds  Easier to scale for writes  Harder to scale for reads  Easier to add new features  Harder to make as reliable", 
            "title": "BaGet vs nuget.org"
        }, 
        {
            "location": "/vs/nugetserver/", 
            "text": "NuGet.Server\n\n\n\n\nWarning\n\n\nThis page is a work in progress!\n\n\n\n\nNuGet.Server\n is a lightweight standalone NuGet server. It is strongly recommended that you upgrade to BaGet if you use NuGet.Server. Feel free to open \nGitHub issues\n if you need help migrating.\n\n\n\n\nNuGet.Server\n\n\nOnly runs on Windows\n\n\nSupports NuGet v2 APIs (missing verified packages, signed packages, etc...)\n\n\nDoesn't support NuGet's v3 APIs\n\n\nDoes not scale well\n\n\nNot well documented\n\n\nNot well maintained\n\n\n\n\n\n\nBaGet\n\n\nCross-platform\n\n\nSupports NuGet v3 APIs\n\n\n\n\n\n\n\n\nUpgrade Guide\n\n\nTODO", 
            "title": "NuGet.Server"
        }, 
        {
            "location": "/vs/nugetserver/#nugetserver", 
            "text": "Warning  This page is a work in progress!   NuGet.Server  is a lightweight standalone NuGet server. It is strongly recommended that you upgrade to BaGet if you use NuGet.Server. Feel free to open  GitHub issues  if you need help migrating.   NuGet.Server  Only runs on Windows  Supports NuGet v2 APIs (missing verified packages, signed packages, etc...)  Doesn't support NuGet's v3 APIs  Does not scale well  Not well documented  Not well maintained    BaGet  Cross-platform  Supports NuGet v3 APIs", 
            "title": "NuGet.Server"
        }, 
        {
            "location": "/vs/nugetserver/#upgrade-guide", 
            "text": "TODO", 
            "title": "Upgrade Guide"
        }, 
        {
            "location": "/vs/vsts/", 
            "text": "VSTS\n\n\n\n\nWarning\n\n\nThis page is a work in progress!", 
            "title": "VSTS"
        }, 
        {
            "location": "/vs/vsts/#vsts", 
            "text": "Warning  This page is a work in progress!", 
            "title": "VSTS"
        }, 
        {
            "location": "/vs/myget/", 
            "text": "MyGet\n\n\n\n\nWarning\n\n\nThis page is a work in progress!", 
            "title": "MyGet"
        }, 
        {
            "location": "/vs/myget/#myget", 
            "text": "Warning  This page is a work in progress!", 
            "title": "MyGet"
        }, 
        {
            "location": "/vs/liget/", 
            "text": "LiGet\n\n\n\n\nWarning\n\n\nThis page is a work in progress!\n\n\n\n\nLiGet\n is a NuGet server created with a linux-first approach.\n\n\n\n\nLiGet\n\n\nStrong support for Paket\n\n\nOnly supports NuGet's v2 APIs (missing verified packages, signed packages, etc...)\n\n\nStores all packages' metadata using a single JSON file\n\n\n\n\n\n\nBaGet\n\n\nSupports NuGet's v3 APIs\n\n\nStores packages' metadata in a database\n\n\nCapable of ingesting all packages on nuget.org\n\n\nCan run on Azure", 
            "title": "LiGet"
        }, 
        {
            "location": "/vs/liget/#liget", 
            "text": "Warning  This page is a work in progress!   LiGet  is a NuGet server created with a linux-first approach.   LiGet  Strong support for Paket  Only supports NuGet's v2 APIs (missing verified packages, signed packages, etc...)  Stores all packages' metadata using a single JSON file    BaGet  Supports NuGet's v3 APIs  Stores packages' metadata in a database  Capable of ingesting all packages on nuget.org  Can run on Azure", 
            "title": "LiGet"
        }, 
        {
            "location": "/vs/artifactory/", 
            "text": "Artifactory\n\n\n\n\nWarning\n\n\nThis page is a work in progress!", 
            "title": "Artifactory"
        }, 
        {
            "location": "/vs/artifactory/#artifactory", 
            "text": "Warning  This page is a work in progress!", 
            "title": "Artifactory"
        }, 
        {
            "location": "/vs/nexus/", 
            "text": "Nexus\n\n\n\n\nWarning\n\n\nThis page is a work in progress!", 
            "title": "Nexus"
        }, 
        {
            "location": "/vs/nexus/#nexus", 
            "text": "Warning  This page is a work in progress!", 
            "title": "Nexus"
        }, 
        {
            "location": "/vs/teamcity/", 
            "text": "TeamCity\n\n\n\n\nWarning\n\n\nThis page is a work in progress!", 
            "title": "TeamCity"
        }, 
        {
            "location": "/vs/teamcity/#teamcity", 
            "text": "Warning  This page is a work in progress!", 
            "title": "TeamCity"
        }
    ]
}